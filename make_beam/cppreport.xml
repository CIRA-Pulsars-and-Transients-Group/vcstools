<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.66"/>
    <errors>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="chk_vdif.c" line="118"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="chk_vdif.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame&apos; can be reduced." verbose="The scope of the variable &apos;frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;finished&apos; can be reduced." verbose="The scope of the variable &apos;finished&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rtn&apos; can be reduced." verbose="The scope of the variable &apos;rtn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;got_first&apos; can be reduced." verbose="The scope of the variable &apos;got_first&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pattern&apos; can be reduced." verbose="The scope of the variable &apos;pattern&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;second&apos; can be reduced." verbose="The scope of the variable &apos;second&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_second&apos; can be reduced." verbose="The scope of the variable &apos;last_second&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_frame&apos; can be reduced." verbose="The scope of the variable &apos;last_frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;MJD&apos; can be reduced." verbose="The scope of the variable &apos;MJD&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_count&apos; can be reduced." verbose="The scope of the variable &apos;frame_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff_frame&apos; can be reduced." verbose="The scope of the variable &apos;diff_frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff_seconds&apos; can be reduced." verbose="The scope of the variable &apos;diff_seconds&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="chk_vdif.c" line="77"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pattern" verbose="Memory leak: pattern">
            <location file="chk_vdif.c" line="190"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="make_beam.c" line="422"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="make_beam.c" line="1202"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="make_beam.c" line="1209"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="make_beam.c" line="1213"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: delay_command - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: delay_command - otherwise it is redundant to check it against null." inconclusive="true">
            <location file="make_beam.c" line="427"/>
            <location file="make_beam.c" line="422"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float* to char* is not portable due to different binary data representations on different platforms." verbose="Casting from float* to char* is not portable due to different binary data representations on different platforms." inconclusive="true">
            <location file="make_beam.c" line="1390"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;token&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;token&apos; is reassigned a value before the old one has been used.">
            <location file="make_beam.c" line="457"/>
            <location file="make_beam.c" line="456"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;token&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;token&apos; is reassigned a value before the old one has been used.">
            <location file="make_beam.c" line="458"/>
            <location file="make_beam.c" line="457"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;fft_mode&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;fft_mode&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?">
            <location file="make_beam.c" line="899"/>
            <location file="make_beam.c" line="897"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;edge&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;edge&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?">
            <location file="make_beam.c" line="900"/>
            <location file="make_beam.c" line="896"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sampval&apos; can be reduced." verbose="The scope of the variable &apos;sampval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_command&apos; can be reduced." verbose="The scope of the variable &apos;new_command&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_command&apos; can be reduced." verbose="The scope of the variable &apos;new_command&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;test&apos; can be reduced." verbose="The scope of the variable &apos;test&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wgts&apos; can be reduced." verbose="The scope of the variable &apos;wgts&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="533"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rval&apos; can be reduced." verbose="The scope of the variable &apos;rval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rval&apos; can be reduced." verbose="The scope of the variable &apos;rval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="make_beam.c" line="666"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pos_hival&apos; is assigned a value that is never used." verbose="Variable &apos;pos_hival&apos; is assigned a value that is never used.">
            <location file="make_beam.c" line="194"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;neg_hival&apos; is assigned a value that is never used." verbose="Variable &apos;neg_hival&apos; is assigned a value that is never used.">
            <location file="make_beam.c" line="196"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:\012    %s =&gt; %20s\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012To make it crash, type in more than 5 characters.">
            <location file="make_beam.c" line="438"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:\012    %i =&gt; %3i\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    int a;\012    scanf(&quot;%i&quot;, &amp;a);\012    return 0;\012}\012\012To make it crash:\012perl -e &apos;print &quot;5&quot;x2100000&apos; | ./a.out">
            <location file="make_beam.c" line="554"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:\012    %i =&gt; %3i\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    int a;\012    scanf(&quot;%i&quot;, &amp;a);\012    return 0;\012}\012\012To make it crash:\012perl -e &apos;print &quot;5&quot;x2100000&apos; | ./a.out">
            <location file="make_beam.c" line="630"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:\012    %i =&gt; %3i\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    int a;\012    scanf(&quot;%i&quot;, &amp;a);\012    return 0;\012}\012\012To make it crash:\012perl -e &apos;print &quot;5&quot;x2100000&apos; | ./a.out">
            <location file="make_beam.c" line="698"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: chan_min" verbose="Memory leak: chan_min">
            <location file="make_beam.c" line="349"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: chan_max" verbose="Memory leak: chan_max">
            <location file="make_beam.c" line="349"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: new_command" verbose="Memory leak: new_command">
            <location file="make_beam.c" line="514"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;float2char&apos; is never used." verbose="The function &apos;float2char&apos; is never used.">
            <location file="make_beam.c" line="171"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;float2char_trunc&apos; is never used." verbose="The function &apos;float2char_trunc&apos; is never used.">
            <location file="make_beam.c" line="180"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;make_get_delay_call&apos; is never used." verbose="The function &apos;make_get_delay_call&apos; is never used.">
            <location file="make_beam.c" line="404"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_pfb_call&apos; is never used." verbose="The function &apos;read_pfb_call&apos; is never used.">
            <location file="make_beam.c" line="375"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
