
cmake_minimum_required (VERSION 2.6)
project (MWA_Utilities)

set(CMAKE_C_FLAGS "-O3 ")
set(CMAKE_C_FLAGS_DEBUG "-O0 -g")
set(CMAKE_C_FLAGS_RELEASE "-O3 ")
set(CMAKE_CXX_FLAGS "-O3 ")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 ")

set (MWA_Utilities_MAJOR_VERSION 1)
set (MWA_Utilities_MINOR_VERSION 1)
set (MWA_Utilities_PATCH_VERSION 0)
set (MWA_Utilities_VERSION
    ${MWA_Utilities_MAJOR_VERSION}.${MWA_Utilities_MINOR_VERSION}.${MWA_Utilities_PATCH_VERSION})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(USE_PROJECT_CMAKE_MODULE_PATH "-DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}")
set(USE_PROJECT_INSTALL_PREFIX "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")

if (APPLE)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${BEAM_C_FLAGS} ${MPI_C_COMPILE_FLAGS} ")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${BEAM_CXX_FLAGS} ")
else ()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${BEAM_C_FLAGS} ${MPI_C_COMPILE_FLAGS} -fopenmp")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${BEAM_CXX_FLAGS} -fopenmp")
endif ()


include(ExternalProject)
find_package(CUDA)
if (CUDA_FOUND)
    ExternalProject_Add(gpu_utils    
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/gpu_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
endif (CUDA_FOUND)

find_package(CFITSIO)

if (CFITSIO_FOUND)    
    ExternalProject_Add(mwac_utils    
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
endif()

find_package(PSRFITS_UTILS)
if (PSRFITS_UTILS_FOUND)
    ExternalProject_Add(make_beam
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/make_beam
    DEPENDS
        mwac_utils
        gpu_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
endif (PSRFITS_UTILS_FOUND)


find_package(SLALIB)
find_package(Postgres)
find_package(MPI)
ExternalProject_Add(ascii_to_bin
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/ascii_to_bin
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
ExternalProject_Add(get_weights
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/get_weights
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )

ExternalProject_Add(invert_antenna
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/invert_antenna
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )



if (CFITSIO_FOUND)
    ExternalProject_Add(build_lfiles
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/build_lfiles
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )

    ExternalProject_Add(read_mwac
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/read_mwac
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
    
    ExternalProject_Add(read_pfb
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/read_pfb
    DEPENDS
        mwac_utils
    DOWNLOAD_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS
    ${USE_PROJECT_INSTALL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    ${USE_PROJECT_CMAKE_MODULE_PATH}
    )

    if (PSRFITS_UTILS_FOUND)  
        ExternalProject_Add(make_psrfits
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/make_psrfits
        DEPENDS
            mwac_utils
        DOWNLOAD_COMMAND ""
        UPDATE_COMMAND ""
        CMAKE_ARGS
        ${USE_PROJECT_INSTALL_PREFIX}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
        -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        ${USE_PROJECT_CMAKE_MODULE_PATH}
    )
    endif (PSRFITS_UTILS_FOUND)
endif (CFITSIO_FOUND)

#find_package(TWOPIP)
#if (TWOPIP_FOUND)
#	add_subdirectory(check_corr)
#endif (TWOPIP_FOUND)

if (POSTGRES_FOUND)
    if (SLALIB_FOUND)
        if (PSRFITS_UTILS_FOUND) 
 	    ExternalProject_Add(get_delays
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/get_delays
        DEPENDS
            mwac_utils
        DOWNLOAD_COMMAND ""
        UPDATE_COMMAND ""
        CMAKE_ARGS
        ${USE_PROJECT_INSTALL_PREFIX}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} 
        -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} 
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        ${USE_PROJECT_CMAKE_MODULE_PATH}
        )
 	endif (PSRFITS_UTILS_FOUND)
    endif (SLALIB_FOUND)
endif (POSTGRES_FOUND)

INCLUDE(InstallRequiredSystemLibraries)

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MWA Correlator Utilities")
SET(CPACK_PACKAGE_VENDOR "Stephen M. Ord")

SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ReadMe.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_VERSION_PATCH "1")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake
${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
SET(CPACK_PACKAGE_EXECUTABLES "build_lfiles" "check_corr" "read_pfb")
SET(CPACK_GENERATOR "RPM")
SET(CPACK_SET_DESTDIR ON)

INCLUDE(CPack)

